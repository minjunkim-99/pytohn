import pygame
import random

# 게임 환경 설정
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
PADDLE_WIDTH = 100
PADDLE_HEIGHT = 20
BALL_RADIUS = 10
PADDLE_SPEED = 5
BALL_SPEED_X = 3
BALL_SPEED_Y = 3

# 색상 설정
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)

# 파이게임 초기화
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("1인용 핀볼 게임")

clock = pygame.time.Clock()

def game_loop():
    paddle_x = SCREEN_WIDTH // 2 - PADDLE_WIDTH // 2
    paddle_y = SCREEN_HEIGHT - PADDLE_HEIGHT - 10
    ball_x = random.randint(BALL_RADIUS, SCREEN_WIDTH - BALL_RADIUS)
    ball_y = SCREEN_HEIGHT // 2
    ball_speed_x = BALL_SPEED_X
    ball_speed_y = BALL_SPEED_Y
    game_over = False

    while not game_over:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return

        # 패들 이동
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            paddle_x -= PADDLE_SPEED
        if keys[pygame.K_RIGHT]:
            paddle_x += PADDLE_SPEED

        # 경계 처리
        if paddle_x < 0:
            paddle_x = 0
        elif paddle_x > SCREEN_WIDTH - PADDLE_WIDTH:
            paddle_x = SCREEN_WIDTH - PADDLE_WIDTH

        # 공 이동
        ball_x += ball_speed_x
        ball_y += ball_speed_y

        # 공과 벽 충돌 처리
        if ball_x < BALL_RADIUS or ball_x > SCREEN_WIDTH - BALL_RADIUS:
            ball_speed_x *= -1
        if ball_y < BALL_RADIUS:
            ball_speed_y *= -1

        # 공과 패들 충돌 처리
        if paddle_x < ball_x < paddle_x + PADDLE_WIDTH and ball_y + BALL_RADIUS > paddle_y:
            ball_speed_y *= -1

        # 게임 오버 조건
        if ball_y > SCREEN_HEIGHT:
            game_over = True

        # 화면 그리기
        screen.fill(BLACK)
        pygame.draw.rect(screen, BLUE, (paddle_x, paddle_y, PADDLE_WIDTH, PADDLE_HEIGHT))
        pygame.draw.circle(screen, WHITE, (ball_x, ball_y), BALL_RADIUS)
        pygame.display.update()

        clock.tick(60)

    pygame.quit()

game_loop()
